kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: "Generador-Pepelines"
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        node {
          stage('Begin') {
            sh "echo Comienzo del pipeline de generacion de pipelines"
          }
          stage('Build-pipeline ') {
            script {
                 def userInput = input(
                 id: 'userInput', message: 'Enter path of test reports:?', 
                 parameters: [
                 [$class: 'TextParameterDefinition', defaultValue: 'none', description: 'Ingrese el nombre de la aplicacion', name: 'APP_NAME'],
                 [$class: 'TextParameterDefinition', defaultValue: 'none', description: 'Ingrese la url del repositorio', name: 'GIT_URL'],
                 [$class: 'TextParameterDefinition', defaultValue: 'none', description: 'Ingrese el branch o tag', name: 'GIT_REF'],
                 [$class: 'TextParameterDefinition', defaultValue: 'none', description: 'Ingrese path de inicio del serv', name: 'CONTEXTDIR_TEMPL']
                ])
                echo "La URL del repo es: "+userInput['GIT_URL']
                echo "El nombre de la app es: "+userInput['APP_NAME']
                //sh 'oc new-app -p APP_NAME=' + userInput['APP_NAME'] + ' -f https://github.com/gditrani269/OS-Pipeline-Gen/blob/master/Pipeline-Template.yaml'
                sh 'oc process -p SERVICE_NAME='+userInput['APP_NAME'] + '-p SERVICE_GIT_URL=' + userInput['GIT_URL'] + '-p GIT_REF=' + userInput['GIT_REF'] + '-p CONTEXTDIR_TEMPL=' + userInput['CONTEXTDIR_TEMPL'] + ' -f https://raw.githubusercontent.com/gditrani269/OS-Pipeline-Gen/master/tmp2.yaml | oc create -f -'
            }
          }
        }   
